// Datasource & generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================
// Auth & Users
// ==================

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  role          Role           @default(STUDENT)
  password      String
  emailVerified DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  studentProfile StudentProfile?
  results        TestResult[]
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model StudentProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  phoneNumber String?
  address     String?
  grade       String
  school      String?
  parentName  String?
  parentPhone String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

// ==================
// Subjects & Materials
// ==================

model Subject {
  id          String     @id @default(cuid())
  name        String
  description String?
  grade       String
  createdAt   DateTime   @default(now())

  materials Material[]
  tests     Test[]

  @@map("subjects")
}

model Material {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileType    String
  subjectId   String
  createdAt   DateTime @default(now())

  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("materials")
}

// ==================
// Tests & Questions & Results
// ==================

model Test {
  id          String     @id @default(cuid())
  title       String
  description String?
  duration    Int
  subjectId   String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  subject   Subject      @relation(fields: [subjectId], references: [id])
  questions Question[]
  results   TestResult[]

  @@map("tests")
}

model Question {
  id            String  @id @default(cuid())
  testId        String
  question      String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer String
  explanation   String?

  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model TestResult {
  id          String   @id @default(cuid())
  userId      String
  testId      String
  score       Float
  answers     Json
  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("test_results")
}

enum Role {
  ADMIN
  STUDENT
}

// ==================
// NextAuth (Prisma Adapter)
// ==================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

